#!@SHELL@

prefix="@prefix@"
exec_prefix="@exec_prefix@"
exec_prefix_set=no
datarootdir="@datarootdir@"

optim="@optim@"

plugins="@PLUGINS@ "

cppflags=""
cflags=""
cxxflags=""
objcflags=""
ldflags=""
libs=""

cflags_tuning="@CFLAGS_TUNING@"

#
#  Do not touch below this place unless you really know what you are doing
#
usage()
{
        cat << BLAH
Usage: vlc-config OPTIONS MODULES
Options:
        [--prefix[=DIR]]          set prefix
        [--exec-prefix[=DIR]]     set exec prefix
        [--version]               print version and exit
        [--list]                  print modules names and exit
        [--libs]                  output linking flags
        [--cflags]                output C compilation flags
        [--cxxflags]              output C++ compilation flags
        [--objcflags]             output Objective C compilation flags
Modules:
        vlc                       the main VLC object
        MODULE                    any available module (dummy, gtk, avi, etc.)
        libs                      flags for external libs
BLAH
        exit $1
}

register_flags()
{
  case "$1" in
    #@1@#
    *)
      ;;
  esac
}

if test $# -eq 0; then
        usage 1 1>&2
fi

if test "${top_builddir}" != ""; then
  top_builddir="${top_builddir}/"
elif test "${TOP_BUILDDIR}" != ""; then
  top_builddir="${TOP_BUILDDIR}/"
fi
includes="${includes}"
cppflags="${includes}"
module=""

#
#  Various additional defines
#
if [ "${optim}" = speed ]; then
  cflags="${cflags} ${cflags_tuning}"
  cxxflags="${cxxflags} ${cflags_tuning}"
  objcflags="${objcflags} ${cflags_tuning}"
fi

#
#  The main argument loop
#
while test $# -gt 0; do
  case "$1" in
  -*=*) optarg=`echo "$1" | sed 's/-[_a-zA-Z0-9\-]*=//'` ;;
  *) optarg= ;;
  esac

  # Mangle plugin name, if applicable
  # This is just a convenience hack for modules/common.am
  tgt="$1"
  tgt="${tgt##*/}"
  case "$tgt" in
    lib*_plugin_la-*.lo)
      tgt="${tgt#*lib}"
      tgt="${tgt%_plugin_la-*.lo}"
      ;;
    lib*_plugin.la)
      tgt="${tgt#lib}"
      tgt="${tgt%_plugin.la}"
      ;;
    *)
      ;;
  esac

  case "$tgt" in
    --prefix=*)
      prefix="${optarg}"
      if test "${exec_prefix_set}" = no ; then
        exec_prefix="${optarg}"
      fi
      ;;
    --prefix)
      echo_prefix=yes
      ;;
    --exec-prefix=*)
      exec_prefix="${optarg}"
      exec_prefix_set=yes
      ;;
    --exec-prefix)
      echo_exec_prefix=yes
      ;;
    --version)
      echo "@VERSION@"
      exit 0
      ;;
    --list)
      echo_list=yes
      ;;
    --cflags)
      echo_cflags=yes
      ;;
    --cppflags)
      echo_cppflags=yes
      ;;
    --cxxflags)
      echo_cxxflags=yes
      ;;
    --objcflags)
      echo_objcflags=yes
      ;;
    --ldflags)
      echo_ldflags=yes
      ;;
    --libs|-libs)
      echo_libs=yes
      ;;
    -*)
      usage 1 1>&1
      ;;
    libvlccore)
      ;;
    plugin)
      echo_plugin=yes
      ;;
    *)
      module="$tgt"
      ;;
  esac

  # Register per-module *FLAGS
  register_flags "$tgt"

  shift
done

#
#  If a module was requested, use its name
#
if test -n "${module}"; then
  cppflags="${cppflags} -DMODULE_NAME=${module} -DMODULE_NAME_IS_${module} -DMODULE_STRING=\"${module}\""
fi

#
#  Output what we were asked
#
if test "${echo_list}" = yes; then
  if test "${echo_plugin}" = yes; then
    echo "${plugins}"
    printf '\n'
  fi
  exit 0
fi

if test "${echo_prefix}" = yes; then
  echo "${prefix}"
fi
if test "${echo_exec_prefix}" = yes; then
  echo "${exec_prefix}"
fi
if test "${echo_cppflags}" = yes; then
  echo "${cppflags}"
fi
if test "${echo_cflags}" = yes; then
  echo "${cppflags} ${cflags}"
fi
if test "${echo_cxxflags}" = yes; then
  echo "${cppflags} ${cxxflags}"
fi
if test "${echo_objcflags}" = yes; then
  echo "${cppflags} ${objcflags}"
fi
if test "${echo_ldflags}" = yes; then
  echo "${ldflags}"
fi

# Libs
# There are 4 possibilities
#  - We are a plugin or a builtin
#  - We are building something from the inside (builtin)
#       - Link with builtins in place
#  If you want something shared from the inside (binding),
#  you need "builtin vlc"
if test "${echo_libs}" = yes; then
  echo "${libs}"
fi
